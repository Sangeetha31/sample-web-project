pipeline {
    agent any //selection of agents
    // defining environment variables
    environment {
        SONAR_HOME = 'C:\\Users\\Administrator\\Documents\\tools\\sonar-scanner\\bin'
        REPO_NAME = 'https://github.com/Sangeetha31/sample-web-project.git'
        BRANCH_NAME = 'master'
        SONAR_TOKEN = credentials('sangu-sonar-project3-token')
        DOCKER_CREDS = 'sang-dockerhub'
        SONAR_PROJECT_KEY = 'sangu-day3'
        SONAR_SERVER_NAME = 'sang-sonarqube'
        IMAGE_NAME = "sangeeta12/sanguwebapp-iis-ltsc2022"
        IMAGE_TAG = "codev1"
        TRIVY_REPORT = "trivy-sangu-report.txt"
        TRIVY_PATH = "C:\\Users\\Administrator\\Documents\\tools\\trivy"
    }

    stages {
        // stage1
        stage('Testing and verify of required commands') {
            steps {
                echo 'Hello World'
                // bat or pwsh
                bat """
                %SONAR_HOME%\\sonar-scanner --version
                echo == checking docker ===>
                docker version
                echo ==> java version
                java --version
                echo == checking git version ==
                git version
                """
            }
        }
        //git checkout
        stage('taking code of github repo'){
            steps {
                echo 'clone repo to project'
                git url: "${REPO_NAME}", branch: "${BRANCH_NAME}"
            }
        }
        // doing sast with sonar-qube
        stage('SAST with sonar-scanner'){
            //using plugins to call sonarENV
            steps{
                echo 'wait for sonar-scanner to finish'
                //calling plugin
                script{
                    withSonarQubeEnv("${SONAR_SERVER_NAME}") {
                
                bat """
                   %SONAR_HOME%\\sonar-scanner \
                   -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                   -Dsonar.sources=. \
                   -Dsonar.host.url=${SONAR_HOST_URL} \
                   -Dsonar.token=${SONAR_TOKEN}
                    """
                    }
                }
            }
        }
              // using docker plugin to build container image
            stage('building docker image'){
                steps {
                    echo 'starting docker build process'
                    //to use docker plugin using script
                    script{
                        //def imageName = "sangeeta12/sanguwebapp-iis-ltsc2022"
                        //def imageTag = "codev1"
                        docker.build("${IMAGE_NAME}:${IMAGE_TAG}",".")
                    }
                    //verify image build
                    bat 'docker images | findstr sanguwebapp'
                }
                
            }

             // add stage to scan using trivy is no HIgh , critical vuln then proceed else stpo pipeline
            stage('post build security check using trivy'){
                steps {
                    echo "doing scan"
                    bat """
                    set PATH=%TRIVY_PATH%;%PATH%
                    echo PATH in Jenkins: %PATH%
                    trivy image --severity HIGH,CRITICAL --format table  --report summary -o ${TRIVY_REPORT} ${IMAGE_NAME}:${IMAGE_TAG} --skip-version-check
                    """
            }
        }
            //pushing image to dockerhub
            stage('Docker hub image push'){
                steps{
                    echo 'pushing image to docker hub'
                    script{
                        // def imageName = "sangeeta12/sanguwebapp-iis-ltsc2022"
                        // def imageTag = "codev1"
                        def hubCred = "${DOCKER_CREDS}"
                        //calling jenkins plugin docker pipeline to push
                        docker.withRegistry('https://registry.hub.docker.com',hubCred){
                            docker.image("${IMAGE_NAME}" + ":" + "${IMAGE_TAG}").push()
                        }
                    }
                }
            }
            //deploy app as container using IIS docker image
            stage('deploy app using container image'){
                steps{
                    echo 'deploying app using container'
                    bat """
                        echo trying to remove container with same name
                        docker rm sangappc1 -f >null 2>&1 || echo container not found
                        docker run -itd --name sangappc1 -p 1234:80 ${IMAGE_NAME}:${IMAGE_TAG}
                        docker ps | findstr sangappc1
                    """
                }
            }
            // //Implement DAST
            // stage('using zap to do'){
            //     //only given label agent can run this stage job
            //     agent{
            //         label 'sang-win'
            //     }
            //     steps{
            //         echo 'using zap'
                    
            //     }
            // }
    }
}